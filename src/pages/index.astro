<!DOCTYPE html>
<html>
<head>
    <title>Game map</title>
    <meta charset="utf-8">
    <style>
        body {
            font-family: Tahoma, sans-serif;
            margin: 20px;
        }
        #map table {
            border-collapse: collapse;
        }
        #map td {
            width: 40px;
            height: 40px;
            border: 1px solid #ccc;
            cursor: pointer;
            position: relative;
        }
        #map td[data-type="mountain"] {
            background-color: #e6602b;
        }
        #map td[data-type="hill"] {
            background-color: #fcc02e;
        }
        #map td[data-type="plain"] {
            background-color: #fcd971;
        }
        #map td[data-type="swamp"] {
            background-color: #aec55d;
        }
        #map td[data-type="water"] {
            background-color: #3399ff;
        }
        #map td[data-type="forest"] {
            background-color: #228b22;
        }
        #map td[data-type="sea"] {
            background-color: #005f99;
        }
        #map td[data-type="empty"] {
            background-color: #ffffff;
        }
        #map td:hover {
            outline: 2px solid #000;
        }
        #map td span {
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            display: flex;
            justify-content: center;
            align-items: center;
            pointer-events: none;
            font-weight: bold;
            color: #000;
        }
        #controls {
            margin-top: 20px;
        }
        #saveButton, #loadButton, #addRowButton, #addColButton, #addRowStartButton, #addColStartButton, #editModeButton {
            margin-left: 10px;
            padding: 5px 10px;
            background-color: #007bff;
            color: #fff;
            border: none;
            border-radius: 3px;
            cursor: pointer;
        }
        #saveButton:hover, #loadButton:hover, #addRowButton:hover, #addColButton:hover, #addRowStartButton:hover, #addColStartButton:hover, #editModeButton:hover {
            background-color: #0056b3;
        }
        #fileInput {
            display: none;
        }
        #legend {
            margin-top: 20px;
        }
        #legend div {
            display: flex;
            align-items: center;
            margin-bottom: 5px;
        }
        #legend div span {
            width: 20px;
            height: 20px;
            margin-right: 10px;
            display: inline-block;
        }
        .hidden {
            display: none;
        }
        #tooltipForm {
                position: fixed;
                top: 50%;
                left: 50%;
                transform: translate(-50%, -50%);
                background: #fff;
                border: 1px solid #ccc;
                padding: 20px;
                box-shadow: 0px 4px 6px rgba(0, 0, 0, 0.1);
                z-index: 1000;
            }

        #tooltipForm textarea {
            width: 100%;
            margin-bottom: 10px;
        }
        #customTooltip {
            position: absolute;
            background: rgba(0, 0, 0, 0.8);
            color: #fff;
            padding: 5px 10px;
            border-radius: 5px;
            font-size: 12px;
            pointer-events: none;
            z-index: 1000;
            white-space: nowrap;
        }

    </style>
</head>
<body>
    <h1>Game map</h1>
    <div id="map"></div>
    <button id="viewModeButton">Switch to View Mode</button>

    <div id="controls">
        <label for="cellType">Terrain: </label>
        <select id="cellType">
            <option value="empty">Empty</option>
            <option value="mountain">Mountain</option>
            <option value="hill">Hill</option>
            <option value="plain">Plain</option>
            <option value="swamp">Swamp</option>
            <option value="water">Water</option>
            <option value="forest">Forest</option>
            <option value="sea">Sea</option>
        </select>
        <label for="featureSelect">Feature: </label>
        <select id="featureSelect">
            <option value="">None</option>
            <option value="üèôÔ∏è">City</option>
            <option value="–ì–ì">City2</option>
            <option value="üè°">Village</option>
            <option value="üè∞">Fort</option>
            <option value="‚õ©Ô∏è">Ruins</option>
        </select>
        <input type="text" id="symbolInput" maxlength="1">
        <button id="editModeButton">Switch to Description Mode</button> </br>
        <button id="saveButton">Save Map</button>
        <button id="loadButton">Load Map</button> </br>
        <button id="addRowButton">Add Row (End)</button>
        <button id="addRowStartButton">Add Row (Start)</button>
        <button id="addColButton">Add Column (End)</button>
        <button id="addColStartButton">Add Column (Start)</button></br>
        <input type="file" id="fileInput" accept=".json">
        <div id="tooltipForm" class="hidden">
            <form id="tooltipEditor">
                <label for="tooltipInput">Edit Tooltip:</label><br>
                <textarea id="tooltipInput" rows="4" cols="30" placeholder="Enter description..."></textarea><br>
                <button type="submit">Save</button>
                <button type="button" id="cancelButton">Cancel</button>
            </form>
        </div>
        <div id="customTooltip" class="hidden"></div>
    </div>
    <div id="legend">
        <h3>Legend</h3>
        <div><span style="background-color: #ffffff;"></span>Empty</div>
        <div><span style="background-color: #e6602b;"></span>Mountain</div>
        <div><span style="background-color: #fcc02e;"></span>Hill</div>
        <div><span style="background-color: #fcd971;"></span>Plain</div>
        <div><span style="background-color: #aec55d;"></span>Swamp</div>
        <div><span style="background-color: #3399ff;"></span>Water</div>
        <div><span style="background-color: #228b22;"></span>Forest</div>
        <div><span style="background-color: #005f99;"></span>Sea</div>
    </div>
    <script>
        let gridWidth = 10;
        let gridHeight = 10;
        const mapDiv = document.getElementById('map');
        const cellTypeSelector = document.getElementById('cellType');
        const symbolInput = document.getElementById('symbolInput');
        const saveButton = document.getElementById('saveButton');
        const loadButton = document.getElementById('loadButton');
        const fileInput = document.getElementById('fileInput');
        const addRowButton = document.getElementById('addRowButton');
        const addColButton = document.getElementById('addColButton');
        const addRowStartButton = document.getElementById('addRowStartButton');
        const addColStartButton = document.getElementById('addColStartButton');
        const editModeButton = document.getElementById('editModeButton');
        const viewModeButton = document.getElementById('viewModeButton');
        const controls = document.getElementById('controls');

        const tooltipForm = document.getElementById('tooltipForm');
        const tooltipInput = document.getElementById('tooltipInput');
        const cancelButton = document.getElementById('cancelButton');
        const tooltipEditor = document.getElementById('tooltipEditor');
        const customTooltip = document.getElementById('customTooltip');

        let grid = Array.from({ length: gridHeight }, () => Array(gridWidth).fill({ type: "empty", symbol: "", tooltip: "" }));
        let editMode = "terrain"; // Modes: "terrain" or "description" or "feature"

        let selectedCell = null; // –•—Ä–∞–Ω–∏—Ç —Ç–µ–∫—É—â—É—é –≤—ã–±—Ä–∞–Ω–Ω—É—é –∫–ª–µ—Ç–∫—É

        mapDiv.addEventListener('mousemove', (event) => {
            if (!customTooltip.classList.contains('hidden')) {
                customTooltip.style.left = `${event.pageX + 10}px`;
                customTooltip.style.top = `${event.pageY + 10}px`;
            }
        });

        function renderGrid() {
            let html = '<table>';
            for (let row = 0; row < gridHeight; row++) {
                html += '<tr>';
                for (let col = 0; col < gridWidth; col++) {
                    const cell = grid[row][col];
                    html += `<td data-type="${cell.type}" data-row="${row}" data-col="${col}" title="${cell.tooltip}">`;
                    html += `<span>${cell.symbol}</span>`;
                    html += `</td>`;
                }
                html += '</tr>';
            }
            html += '</table>';
            mapDiv.innerHTML = html;

            mapDiv.querySelectorAll('td').forEach(cell => {
                cell.addEventListener('click', () => {
                    const row = parseInt(cell.dataset.row, 10);
                    const col = parseInt(cell.dataset.col, 10);

                    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–≤–µ–¥–µ–Ω–∏—è
                    cell.addEventListener('mouseover', (event) => {
                        const tooltipText = grid[row][col].tooltip || "";
                        showTooltip(event, tooltipText);
                    });

                    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É—Ö–æ–¥–∞ –∫—É—Ä—Å–æ—Ä–∞
                    cell.addEventListener('mouseout', () => {
                        hideTooltip();
                    });

                    if (editMode === "terrain") {
                        const terrain = cellTypeSelector.value;
                        grid[row][col] = { ...grid[row][col], type: terrain };
                    } else if (editMode === "description") {
                        openTooltipForm(row, col); // –û—Ç–∫—Ä—ã—Ç—å —Ñ–æ—Ä–º—É –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ–ø–∏—Å–∞–Ω–∏—è
                    } else if (editMode === "feature") {
                        const feature = featureSelect.value;
                        grid[row][col] = { ...grid[row][col], symbol: feature };
                    }

                    renderGrid(); // –ü–µ—Ä–µ—Ä–∏—Å–æ–≤–∞—Ç—å —Å–µ—Ç–∫—É
                });
            });
        }

        function showTooltip(event, text) {
            if (!text) return; // –ù–µ –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å, –µ—Å–ª–∏ —Ç–µ–∫—Å—Ç–∞ –Ω–µ—Ç
            customTooltip.textContent = text;
            customTooltip.style.left = `${event.pageX + 10}px`;
            customTooltip.style.top = `${event.pageY + 10}px`;
            customTooltip.classList.remove('hidden');
        }

        function hideTooltip() {
            customTooltip.classList.add('hidden');
        }

        // –û—Ç–∫—Ä—ã—Ç—å —Ñ–æ—Ä–º—É –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        function openTooltipForm(row, col) {
            selectedCell = { row, col }; // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–ª–µ—Ç–∫–∏
            tooltipInput.value = grid[row][col].tooltip || ""; // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–µ–∫—É—â–µ–µ –æ–ø–∏—Å–∞–Ω–∏–µ
            tooltipForm.classList.remove('hidden'); // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ñ–æ—Ä–º—É
        }

        // –ó–∞–∫—Ä—ã—Ç—å —Ñ–æ—Ä–º—É –±–µ–∑ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
        cancelButton.addEventListener('click', () => {
            tooltipForm.classList.add('hidden'); // –°–∫—Ä—ã–≤–∞–µ–º —Ñ–æ—Ä–º—É
        });

        // –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–æ—Ä–º—ã
        tooltipEditor.addEventListener('submit', (event) => {
            event.preventDefault(); // –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫—É —Å—Ç—Ä–∞–Ω–∏—Ü—ã

            if (selectedCell) {
                const { row, col } = selectedCell;
                grid[row][col] = { ...grid[row][col], tooltip: tooltipInput.value }; // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ
                selectedCell = null; // –û—á–∏—â–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –∫–ª–µ—Ç–∫—É
            }

            tooltipForm.classList.add('hidden'); // –°–∫—Ä—ã–≤–∞–µ–º —Ñ–æ—Ä–º—É
            renderGrid(); // –ü–µ—Ä–µ—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º —Å–µ—Ç–∫—É
        });

        editModeButton.addEventListener('click', () => {
            if (editMode === "terrain") {
                editMode = "description";
                editModeButton.textContent = "Switch to Feature Mode";
            } else if (editMode === "description") {
                editMode = "feature";
                editModeButton.textContent = "Switch to Terrain Mode";
            } else {
                editMode = "terrain";
                editModeButton.textContent = "Switch to Description Mode";
            }
        });

        viewModeButton.addEventListener('click', () => {
            if (editMode !== "view") {
                editMode = "view";
                viewModeButton.textContent = "Exit View Mode";

                // –°–∫—Ä—ã—Ç—å —ç–ª–µ–º–µ–Ω—Ç—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
                controls.classList.add('hidden');
                // viewModeButton.remove('hidden');
                // legend.classList.add('hidden');
            } else {
                editMode = "terrain"; // –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ —Ä–µ–∂–∏–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
                viewModeButton.textContent = "Switch to View Mode";

                // –ü–æ–∫–∞–∑–∞—Ç—å —ç–ª–µ–º–µ–Ω—Ç—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
                controls.classList.remove('hidden');
                // legend.classList.remove('hidden');
            }
        });


        saveButton.addEventListener('click', () => {
            const blob = new Blob([JSON.stringify(grid)], { type: 'application/json' });
            const a = document.createElement('a');
            a.href = URL.createObjectURL(blob);
            a.download = 'map.json';
            a.click();
        });

        loadButton.addEventListener('click', () => {
            fileInput.click();
        });

        fileInput.addEventListener('change', (event) => {
            const file = event.target.files[0];
            if (file) {
                const reader = new FileReader();
                reader.onload = (e) => {
                    grid = JSON.parse(e.target.result);
                    gridHeight = grid.length;
                    gridWidth = grid[0].length;
                    renderGrid();
                };
                reader.readAsText(file);
            }
        });

        addRowButton.addEventListener('click', () => {
            grid.push(Array(gridWidth).fill({ type: "empty", symbol: "", tooltip: "" }));
            gridHeight++;
            renderGrid();
        });

        addRowStartButton.addEventListener('click', () => {
            grid.unshift(Array(gridWidth).fill({ type: "empty", symbol: "", tooltip: "" }));
            gridHeight++;
            renderGrid();
        });

        addColButton.addEventListener('click', () => {
            grid.forEach(row => row.push({ type: "empty", symbol: "", tooltip: "" }));
            gridWidth++;
            renderGrid();
        });

        addColStartButton.addEventListener('click', () => {
            grid.forEach(row => row.unshift({ type: "empty", symbol: "", tooltip: "" }));
            gridWidth++;
            renderGrid();
        });

        renderGrid();

    </script>

</body>
</html>
